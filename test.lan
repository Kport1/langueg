/*var x : {f32,bool}[] = [{.0 = 5f32}, {.1 = false}];
type <T> F = Tree<T>[];
type <T> Tree = (val : T, {none : (), some : F<T>});
var y : Tree<u8> = (.val = 5u8, {.some = [
    (.val = 6u8, {.none = ()}),
    (.val = 7u8, {.some = [
        (.val = 8u8, {.none = ()})
    ]})
]});
fn sum((t : Tree<u8>) -> u8){
    return t.val + match(t.1)
        case .none n => 0
        case .some children => 1
}*/

(1f32,2f32).0 = 2f32;